@mixin mq($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

    @media #{$query} {
      @content;
    }
  }
  @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

// how to use:
// body {
//   font-size: 16px;
//   @include mq(large) {
//     font-size: 18px;
//   }
// }


@mixin transition($property: all) {
  transition: $property 150ms ease-out;
}

// how to use:
// @include transition(opacity);


@mixin clearfix() {
  &:before,
  &:after {
    display: table;
    content: ' ';
  }

  &:after {
    clear: both;
  }
}

// how to use:
// @include clearfix;

@mixin nthoftype($nth) {
  &:first-of-type:nth-last-of-type(n + #{$nth}),
  &:first-of-type:nth-last-of-type(n + #{$nth}) ~ & {
    @content;
  }
}

// how to use:
// @include nthoftype(3) {
//   width: 100% / 3;
// }
// or with loop
// @for $i from 2 through 6 {
//   @include nthoftype(#{$i}) {
//     width: 100% / $i;
//   }
// }
