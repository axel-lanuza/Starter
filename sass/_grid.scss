// Count max width of row - px output
@function gridMaxWidth() {
  @if $gridMaxWidth == auto {
    @return ($gridColumns * $gridColumnWidth) + ($gridColumns * $gridGutter);
  }
  @else {
    @return $gridMaxWidth;
  }
}

// Count col width - % output
@function columnWidth($columns) {
  @return $columns * (($gridColumnWidth + $gridGutter) / (($gridColumns * $gridColumnWidth) + ($gridColumns * $gridGutter)) * 100%);
}


// Use this mixin to st row up
@mixin row($option: none) {
  @if $option == full {
    width: 100%;
    *zoom: 1;
  }
  @else if $option == inside {
    max-width: gridMaxWidth();
    margin-left: -$gridGutter/2;
    margin-right: -$gridGutter/2;
    *zoom: 1;
  }
  @else {
    width: 100%;
    max-width: gridMaxWidth();
    margin-left: auto;
    margin-right: auto;
    *zoom: 1;
  }
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Use this mixin to set col up - pass ammount of columns as argument
@mixin col($columns: $gridColumns) {
  width: columnWidth($columns);
  float: left;
  padding: 0 $gridGutter/2;
}

// Push columns - pass amount of columns as an argument
@mixin push($columns: 0) {
  position: relative;
  left: columnWidth($columns);
}

// Pull columns - pass amount of columns as an argument
@mixin pull($columns: 0) {
  position: relative;
  right: columnWidth($columns);
}